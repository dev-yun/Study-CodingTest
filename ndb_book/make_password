# C개의 주어진 스펠링을 조합하여 L자리의 암호의 경우의 수를 모두 생성하는 문제 (최소 자음 2개 모음 1개 포함. 중복은 허용하지 않음)
# 조합의 형식으로 (a,b,c,d)와 (b,c,a,d)는 같은 암호로 취급

import itertools

l, c = map(int, input().split())
data = input().split()

data = sorted(data)
vowels = ('a', 'e', 'i', 'o', 'u')      # w, y는 모음으로 취급하지 않는다.

new_data = []         # 만약 입력 암호 리스트에 중복된 값이 들어오면 제거
for i in data:
    if i not in new_data:
        new_data.append(i)
print(new_data)

for x in itertools.combinations(new_data, l):
  count = 0         # 모음의 개수 저장
  for i in x:
    if i in vowels:
      count += 1
  if count >= 1 and count <= (l - 2):   # 암호의 원소수(l) - 2 는 자음이 최소 2개인것을 보장 (count는 모음 수))
    print(''.join(x))
    

'''input = 3 6
           r t y e w q
           ['e', 'q', 'r', 't', 'w', 'y']
output 
eqr
eqt
eqw
eqy
ert
erw
ery
etw
ety
ewy '''
