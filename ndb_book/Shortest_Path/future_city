# P.259 미래도시

INF = int(1e9)

n, m = map(int, input().split())
print('------')
graph = [[INF] * (n + 1) for _ in range(n + 1)]

for a in range(1, n+1):
  for b in range(1, n+1):
    if a == b:
      graph[a][b] = 0
  
for _ in range(m):      # 간선은 모두 1의 값을 갖으므로 서로 연결된 노드들 graph에 1추가
  a, b = map(int, input().split())
  graph[a][b] = 1
  graph[b][a] = 1

print('------')
x, k = map(int, input().split())    # 거쳐갈 노드 X, 최종 목적지 K

for k in range(1, n+1):     # 플로이드 워셜 점화식 구현 (위의 최종목적지 k와 다른 k임)
  for a in range(1, n+1):
    for b in range(1, n+1):
      graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])   # 모든 노드에서 다른 모든 노드의 최단거리를 구한다.

distance = graph[1][k] + graph[k][x]   # 위에서 모든 노드 사이의 최단 거리를 구했으니, 1에서 k를 거쳐 x로 가는 길이를 두개로 나누어 구할 수 있다.

if distance >= INF:
  print('-1')
else:
  print(distance)
