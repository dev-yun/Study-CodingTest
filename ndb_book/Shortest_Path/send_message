# P.262 전보

import heapq
import sys
input = sys.stdin.readline 
INF = int(1e9)

n, m, c = map(int, input().split())    # 도시의 개수 n, 통로의 개수 m, 메서지를 보낼 도시 c
graph = [[] for i in range(n + 1)]  # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트
distance = [INF] * (n + 1)     # 최단 거리 테이블을 모두 무한대로 초기화

for _ in range(m):      # 노드들 간 연결 유무와 간선의 비용 입력
  x, y, z = map(int, input().split())
  graph[x].append((y,z))        # x도시에서 y 도시로 가는시간이 z라는 의미

def dijkstra(start):
  q = []
  heapq.heappush(q, (0, start))     # 시작도시로 가기 위한 최단시간은 0으로 설정하여 큐에 삽입 (도시와 시간의 순서가 바뀜(heap은 앞에 인자를 기준으로 최소를 찾기 때문에))
  distance[start] = 0
  while q:    # 큐(q)가 비어있지 않다면
    dist, now = heapq.heappop(q)    # 가장 이동시간이 짧은 (가장앞에있는) 도시에 대한 정보를 꺼내어 dist, now에 저장(경과 시간, 도시)
    if distance[now] < dist:        # 현재 도시가 이미 도착한적 있는 도시라면 무시
      continue
    for i in graph[now]:            # 현재 도시와 연결된 다른 인접한 도시들을 확인
      cost = dist + i[1]    # ex) a도시에서 b도시를 거쳐 c도시로 갈때 b도시 기준으로 dist는 b->c의 시간, i[1]는 a->b의 시간
      if cost < distance[i[0]]:   # 만약 거쳐간 시간이 직접 연결된 시간보다 작다면
        distance[i[0]] = cost     # 거쳐간 시간(cost)로 최단 시간 업데이트
        heapq.heappush(q, (cost, i[0]))

dijkstra(c)   # 다익스트라 알고리즘 실행

count = 0
max_dist = 0

for array in distance:
  if array != INF:
    count += 1
    max_dist = max(max_dist, array)

print(count - 1, max_dist)      # 출발도시는 빼야하므로 count - 1
