# P.300 도시 분할 계획

def find_parent(parent, x):     # 같은 집합의 루트노드를 같게 만듬 (= 같은 집합인지 확인가능)
  if parent[x] != x:
    return find_parent(parent, parent[x])
  return parent[x]

def union_parent(parent, a, b):  # a와 b를 합쳐서 둘중 작은 수를 부모노드로 만듬
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b:
    parent[b] = a
  else:
    parent[a] = b


n, m = map(int, input().split())
parent = [0] * (n + 1)

for i in range(n+1):      # 기본 부모노드 리스트를 자기 자신으로 초기화
  parent[i] = i

edges = []     # 모든 길을 담을 리스트
result = []    # 최소 신장 노드에 맞는 노드들을 담을 결과 리스트

for _ in range(m):
  A, B, C = map(int, input().split())
  edges.append((C, A, B))     # 길의 유지비 C를 기준으로 정렬할것이기 때문에 C, A, B순으로 입력

edges.sort()

for edge in edges:
  C, A, B = edge
  if find_parent(parent, A) != find_parent(parent, B):    # A와 B노드의 루트 노드가 같지 않다면 (사이클을 돌지 않음)
    union_parent(parent, A, B)    # A와 B 합집합을 구해 작은 노드를 부모 노드로 만듬
    result.append(C)   # 결과 값에 도로의 유지비 추가

print(sum(result) - max(result))    # 유지비 리스트의 합에서 가장 큰 유지비의 값을 뺀다.(두 도시로 나누기 위해 도로를 끊음)
