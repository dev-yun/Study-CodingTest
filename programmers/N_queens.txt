def queens(row, col):
    global cnt
    board = []
    n = len(col) - 1                      # col = [0] * (n+1) 로 주어져 -1을 하여 n에 대입
    if (promising(row, col)):             # promising == True 이면 if문 실행
        if (row == n):                      # 모든 행을 살펴 봤으면
            arr = (col[1:n+1])                # col이 0부터 시작되므로 slice 함
            for i, j in enumerate(arr):       # 출력 형식에 맞추기 위한 enumerate 함수
                board.append((i+1,j))
            cnt += 1
            print(cnt, ':', board)
        else:
            for j in range(1, n+1):           # 아직 마지막 행까지 수행하지 못했다면
                col[row + 1] = j                # col[row + 1] (다음행) 에 j값을 넣고
                queens(row+1, col)              # queens 함수 재귀 호출


def promising(row, col):                # promising한지 확인하는 함수
    i = 1
    result = True
    while (i < row and result):           # i < row 이고 result == True 일때 while문 실행
        if(col[row] == col[i] or abs(col[row] - col[i]) == row - i):    # 같은 열에 퀸이 있거나 대각선에 퀸이 겹치면
            result = False                    # result = False로 변경 (배제)
        i += 1                              # 형제 노드를 다시 확인
    return result

output = []
n = int(input("Input : "))                # queen의 개수 입력
cnt = 0
col = [0] * (n+1)               # 0이 아닌 1부터 표현하기 위해 n + 1
queens(0, col)
print("Total number : ",cnt)